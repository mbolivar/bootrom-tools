#! /usr/bin/env python

#
# Copyright (c) 2015 Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from __future__ import print_function
import sys
import argparse
import errno
from tftf import Tftf, TFTF_SECTION_TYPE_RAW_CODE, \
    TFTF_SECTION_TYPE_RAW_DATA, TFTF_SECTION_TYPE_MANIFEST, \
    TFTF_MAX_SECTIONS
from util import error
import io
from elftools.elf.elffile import ELFFile

# Flag to indicate that the last arg parsed was a section type, which
# means that an optional section offset is now legal
allow_section_offset = False
allow_section_skip = False

# the list of sections
sections = []

def auto_int(x):
    # Workaround to allow hex numbers to be entered for numeric arguments.
    return int(x, 0)

class SectionAction(argparse.Action):
    """argparse custom action for handling elements and subparameters"""

    def __call__(self, parser, namespace, values, option_string=None):
        global allow_section_offset, allow_section_skip, sections
        if option_string == "--offset":
            if allow_section_offset:
                # Append our offset to the current section
                sections[-1]['offset'] = values
                allow_section_offset = False
            else:
                error(option_string,
                      "can only follow --code, --data or --manifest")
        elif option_string == "--skip":
            if allow_section_skip:
                # Append our skip offset to the current section
                sections[-1]['skip'] = values
                allow_section_skip = False
            else:
                error(option_string,
                      "can only follow --code, --data or --manifest")
        else:
            # Close the window on section offsets
            allow_section_offset = False
            allow_section_skip = False

            # Handle the specific file type. In all cases, we stage the
            # section in a temporary holding variable to allow the
            # optional "--offset" to be added to it.
            if option_string == "--code":
                sections.append({'type': TFTF_SECTION_TYPE_RAW_CODE,
                                 'file': values})
                allow_section_offset = True
                allow_section_skip = True
            elif option_string == "--data":
                sections.append({'type': TFTF_SECTION_TYPE_RAW_DATA,
                                 'file': values})
                allow_section_offset = True
                allow_section_skip = True
            elif option_string == "--manifest":
                sections.append({'type': TFTF_SECTION_TYPE_MANIFEST,
                                 'file': values})
                allow_section_offset = True
                allow_section_skip = True
            else:
                print("Unknown option '", option_string, "'")

class ElfFileAction(argparse.Action):
    """argparse custom action for handling ELF image files"""

    def __call__(self, parser, namespace, values, option_string=None):
        global sections
        try:
            with io.open(values, 'rb') as elf_file:
                image = ELFFile(elf_file)
                elf_sections = []
                code_section = image.get_section_by_name('.text')
                elf_sections.append({'type': TFTF_SECTION_TYPE_RAW_CODE,
                                     'addr': code_section['sh_addr'],
                                     'buffer': code_section.data()})
                data_section = image.get_section_by_name('.data')
                elf_sections.append({'type': TFTF_SECTION_TYPE_RAW_DATA,
                                     'addr': data_section['sh_addr'],
                                     'buffer': data_section.data()})
                sections += elf_sections
        except IOError as e:
            error(option_string, " must be followed by an ELF image!")
        except Exception as e:
            error(e)

def validate_args(args, sections):
    # Sanity-check the command line args and return a "valid" flag
    success = True
    if not args.out:
        error("Missing --out file!")
        success = False
    if not sections:
        error("You need at least one --code, --data, --manifest or --elf!")
        success = False
    if len(sections) > TFTF_MAX_SECTIONS:
        error("Too many sections -", TFTF_MAX_SECTIONS, "max.")
        success = False
    if args.load < 0 or args.load > 0xffffffff:
        error("--load is out of range")
        success = False
    if args.start < 0 or args.start > 0xffffffff:
        error("--start is out of range")
        success = False
    if args.unipro_mfg < 0 or args.unipro_mfg > 0xffffffff:
        error("--unipro_mfg is out of range")
        success = False
    if args.unipro_pid < 0 or args.unipro_pid > 0xffffffff:
        error("--unipro_pid is out of range")
        success = False
    if args.ara_vid < 0 or args.ara_vid > 0xffffffff:
        error("Error: --ara_vid is out of range")
        success = False
    if args.ara_pid < 0 or args.ara_pid > 0xffffffff:
        error("--ara_pid is out of range")
        success = False
    # TODO: Other checks TBD
    return success


def main():
    """Application for creating Trusted Firmware Transfer Format (TFTF) files

    This is covered in detail in "ES3 Bridge ASIC Boot ROM High Level Design".

    Usage: create-tftf --load <num> --start <num> --out <file> \
           {--name <string>} {--unipro-mfg} {--unipro-pid} \
           {--ara-vid} {--ara-pid} \
           {-v | --verbose} \
           [<section_type> <file> {--offset <num>} {--skip <num>}]...
    Where:
        --load
            The memory location where the package will be loaded.
        --start
            The memory location of the package entry point.
        --out
            Specifies the output file
        --name
            Package name
        --unipro-mfg
            Unipro ASIC manufacturer ID
        --unipro-pid
            Unipro ASIC product ID
        --ara-vid
            ARA vendor ID
        --ara-pid
            ARA product ID
        -v | --verbose
            Display the TFTF header and a synopsis of each TFTF section
        <section_type>
            Specifies a file for a given type of section:
            --code        code section.
            --data        data section.
            --manifest    manifest section.
            --Certificate manifest section.
            Sections are nomally loaded contiguously, starting at --load.
        --offset
            Set the offset of the start of the section to <num> instead
            of the first location after the end of the previous section.
            Offsets are all relative to --load
        --skip
            Set the number of bytes at the start of the section to be thrown 
            away before packing the section.
    """

    parser = argparse.ArgumentParser()
    success = True

    # args that consume files
    parser.add_argument("--code",
                        action=SectionAction,
                        help="The name of an input firmware file")

    parser.add_argument("--data",
                        action=SectionAction,
                        help="The name of an input data file")

    parser.add_argument("--manifest",
                        action=SectionAction,
                        help="The name of an input manifest file")

    parser.add_argument("--elf",
                        action=ElfFileAction,
                        help="The name of an input ELF image file")

    # Per-section numeric args
    parser.add_argument("--offset",
                        action=SectionAction,
                        type=auto_int,
                        help="The load offset for the preceding section")

    parser.add_argument("--skip",
                        action=SectionAction,
                        type=auto_int,
                        help="The number of skip bytes for the preceding \
                              section.")

    # Flags args
    parser.add_argument("-v", "--verbose",
                        action='store_true',
                        help="Dump the TFTF header when done")

    #parser.add_argument("--compress",
    #                    action='store_true',
    #                    help="Compress code and data sections")

    # String/file args
    parser.add_argument("--name",
                        help="The firmware package name")

    parser.add_argument("--out",
                        help="The TFTF output filename")

    # Numeric args
    parser.add_argument("--load",
                        type=auto_int,
                        default=0,
                        help="The load address for the TFTF")

    parser.add_argument("--start",
                        type=auto_int,
                        default=0,
                        help="The TFTF start address (code entry point)")

    parser.add_argument("--unipro-mfg",
                        type=auto_int,
                        default=0,
                        help="The UniPro manufacturer-ID")

    parser.add_argument("--unipro-pid",
                        type=auto_int,
                        default=0,
                        help="The UniPro product-ID")

    parser.add_argument("--ara-vid",
                        type=auto_int,
                        default=0,
                        help="The ARA vendor-ID")

    parser.add_argument("--ara-pid",
                        type=auto_int,
                        default=0,
                        help="The ARA product-ID")

    args = parser.parse_args()

    # Sanity-check the arguments
    if not validate_args(args, sections):
        error("Invalid args")
        sys.exit(errno.EINVAL)

    # Populate the TFTF header from the command line args
    tftf_header = Tftf()
    tftf_header.firmware_package_name = args.name
    tftf_header.load_base = args.load
    tftf_header.start_location = args.start
    tftf_header.unipro_mfg_id = args.unipro_mfg
    tftf_header.unipro_pid = args.unipro_pid
    tftf_header.ara_vid = args.ara_vid
    tftf_header.ara_pid = args.ara_pid
    for section in sections:
        if 'file' in section:
            success = tftf_header.add_section_from_file(section['type'],
                                                        section['file'],
                                                        section.get(\
                                                            'offset', 0),
                                                        section.get(\
                                                            'skip', 0))
            if not success:
                error("Too many sections")
                sys.exit(errno.EFBIG)
        elif 'buffer' in section:
            offset = 0
            if 'addr' in section:
                offset = section['addr'] - tftf_header.load_base
            success = tftf_header.add_section(section['type'],
                                              section['buffer'],
                                              offset,
                                              section.get('skip', 0))
            if not success:
                error("Too many sections")
                sys.exit(errno.EFBIG)

    # Make the TFTF header internally consistent
    tftf_header.post_process()

    # Write the TFTF file (i.e., header and section files)
    if not tftf_header.write(args.out):
        sys.exit(errno.EIO)

    # Optionally display the header info
    if args.verbose:
        tftf_header.display(args.out)
        tftf_header.display_data(args.out)

    print("Done")

## Launch main
#
if __name__ == '__main__':
    main()
